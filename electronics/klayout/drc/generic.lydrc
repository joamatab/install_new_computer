<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>drc</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>drc_scripts</group-name>
 <menu-path>tools_menu.drc.end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>drc-dsl-xml</dsl-interpreter-name>
 <text>

# This is the full set of rules. It will take a long time to run on the full mask!
# http://www.klayout.de/doc/manual/drc_runsets.html#h2-639
# http://www.klayout.de/doc/about/drc_ref_layer.html#space

source($inputpath)
report("DRC report", $outputpath)

# Use four cores - use with caution!
tiles(1.mm)
threads(4)
angle = 85

wg   = input(1, 0)
gc   = input(2, 0)
slab = input(3, 0)
N    = input(20, 0)
Npp  = input(24, 0)
P    = input(21, 0)
Pp   = input(23, 0)
Ppp  = input(25, 0)
PDPp  = input(27, 0)
Ge   = input(5, 0)
GeNpp= input(26, 0)
M1   = input(41, 0)
M2   = input(45, 0)
MH   = input(47, 0)

VIA1 = input(40, 0)
VIA2 = input(44, 0)
bond_pad_open = input(46, 0)
TXT  = input(66, 0)

NoTileM1   = input(60, 0)
NoTileMH   = input(61, 0)
NoTileML   = input(62, 0)
NoTileSi   = input(63, 0)
SiTiles   = input(190, 0)
M1Tiles   = input(191, 0)
Floorplan  = input(64, 0)
DRCexclude = input(67, 0)
deepTrench   = input(7, 0)
oxideEtch   = input(76, 0)
DevRec = input(68,0)

# DRC exclude
# wg = wg.not(DRCexclude)

# generic layers
implant = N   | Npp | P
contact = Npp | Ppp | GeNpp
silicon =  wg | slab| Ge

# size of Silicon wg
wg.width(0.18, angle_limit(angle)).output("wg_width","wg minimum feature size  0.18m")
wg.space(0.20).output("wg_space","Si minimum exclusion 0.2um")

# Grating coupler
gc.width(1.0, angle_limit(angle)).output("gc_width","gc minimum feature size 1 um")
gc.space(0.8).output("gc_space","GC minimum exclusion 0.8 um")
#gc.outside(wg).output("Boundary","devices are out of boundary of GC")

# slab
slab.width(0.3, angle_limit(angle)).output("slab_width","slab minimum feature size 0.3 um")
slab.space(0.8).output("slab_space","slab minimum exclusion 0.8 um")
#rib.outside(wg).output("Boundary","Warning, slab outside wg")

# implants
Pp.width( 1, angle_limit(angle)).output("Pp_width","minimum feature size")
Ppp.width(1, angle_limit(angle)).output("Ppp_width","minimum feature size")
Npp.width(1, angle_limit(angle)).output("Npp_width","minimum feature size")
N.width(  1, angle_limit(angle)).output("N_width","minimum feature size")
P.width(  1, angle_limit(angle)).output("P_width","minimum feature size")

Pp.space( 0.8).output("Pp space"  , "min exclusion")
Ppp.space(0.8).output("Ppp space" , "min exclusion")
Npp.space(0.8).output("Npp space" , "min exclusion")
N.space(  0.8).output("N space"   , "min exclusion")
P.space(  0.8).output("P space"   , "min exclusion")

# ge EPI
Ge.width(1, angle_limit(angle)).output("Ge_width","Ge min width")
GeNpp.width(1, angle_limit(angle)).output("Ge_width","GeNpp min width")
wg.enclosing(Ge, 0.5).output("min inclusion of Ge inside wg layer", "Ge min inclusion")

VIA1.width(1.5, angle_limit(angle)).output("VIA1_width","minimum feature size")
VIA1.space(1.0).output("VIA1 min spacing", "min exclusion")
contact.enclosing(VIA1, 0.2).output("min inclusion VIA1 in contact", "min inclusion")
silicon.enclosing(VIA1, 0.2).output("min inclusion VIA1 in wg/slab/Ge", "min inclusion")

M1.width(1.5, angle_limit(angle)).output("M1_width", "M1 minimum width")
M1.space(1.0).output("M1 min spacing", "M1 min space")
M1.enclosing(VIA1, 0.4).output("min inclusion VIA1 in M1", "M1-VIA1 min inclusion")

MH.width(2, angle_limit(angle)).output("MH_width","MH min width")
MH.space(2.0).output("MH min spacing", "MH min spacing")

VIA2.width(2, angle_limit(angle)).output("VIA2_width","VIA2 minimum width")
VIA2.space(2.0).output("VIA2 min spacing", "min exclusion")
VIA2.separation(VIA1, 2.0).output("min VIA2 separation with VIA1", "min separation VIA2 VIA1")
metal =  M1 | MH
metal.enclosing(VIA2, 1.5).output("min inclusion VIA2 in M1 or MH", "min inclusion")

M2.width(2, angle_limit(angle)).output("M2_width","minimum width M2")
M2.space(2.0).output("M2 min spacing", "M2 min space")
M2.enclosing(VIA2, 1.5).output("min inclusion VIA2 in M2", "min inclusion M2 ")

bond_pad_open.width(2, angle_limit(angle)).output("bond_pad_open_width","minimum width Bond pad Open")
bond_pad_open.space(2).output("bond_pad_open min space","min space Bond Pad Open ")
bond_pad_open.enclosing(M2, 2).output("min inclusion bond pad Open in M2", "min inclusion")

# Check device overlaps, and waveguide connectivity
#overlaps = DevRec.merged(2)
#output(overlaps, "Devices","Devices cannot be overlapping")

# Metal rules based on the metalization process provided by Applied Nanotools.
# Based contact optical lithography
# Metal heater, M1
# LayerM1=input(11,0)
# LayerM1.width(3.0).output("M1_width","M1 minimum feature size violation; min 3 micron")
# LayerM1.space(10.0).output("M1_space","M1 minimum space violation; min 10 micron")

# Metal routing/contact, M2
# LayerM2=input(12,0)
# LayerM2.width(4.0).output("M2_width","M2 minimum feature size violation; min 4 micron")
# LayerM2.space(10.0).output("M2_space","M2 minimum space violation; min 10 micron")

# make sure the devices are within the floorplan layer region;
# wg.outside(LayerFP).output("Boundary","devices are out of boundary")
 </text>
</klayout-macro>
